#!/usr/bin/env bash

set -euo pipefail

# Traverse supplied directory trees (or CWD if omitted) and output the SHA1
# checksum of each regular file. When a file can't be checksummed, output a
# dummy checksum instead. Results can be verified with `treeshasum -c`.

function usage() {
    cat <<EOF
usage: $(basename $0) [OPTION] [FILE ...]
Print or check SHA checksums for directory tree(s), with file modification
date checking.

With no FILE, check here ("."). With -cCl and no FILE, read standard input.

  -c  read SHA sums and dates from the FILEs and check only modified files
  -C  read SHA sums from the FILEs and check all files
  -u  update an existing output file, skipping unmodified files

  -h  display this help and exit
EOF
}

function newerThan() {
    checkpath="$1"
    checkdate="$2"
    realdate=$(stat -f '%m' "$checkpath")
    (($realdate > $checkdate))
    return
}

function filterChanged() {
    while read -r line; do
        read -r checkdate checksum checkpath <<<"$line"
        if newerThan "$checkpath" "$checkdate"; then
            echo "$line"
        fi
    done <"${@:-/dev/stdin}"
}

function check() {
    # Caution! Delimeter is two spaces, so start from third field
    cut <"${@:-/dev/stdin}" -d' ' -f3- | shasum -c
}

function checkChanged() {
    changed=$(filterChanged "$@")
    if [ ! -z "$changed" ]; then
        echo "$changed" | check
    fi
}

function findAll() {
    find "${@:-.}" -type f | sort
}

function manifestFiles() {
    # Caution! Delimeter is two spaces, so start from fifth field
    cut -d' ' -f5- "${@:--}"
}

function findNew() {
    manifest="$1"
    shift
    known=$(manifestFiles "$manifest")
    all=$(findAll "$@")
    echo -e "$known\n$all" | sort | uniq -u
}

function updateManifest() {
    sort -k 3 <(updateKnown "$@") <(findNew "$@" | doSums)
}

function updateKnown() {
    while read -r line; do
        read -r checkdate checksum checkpath <<<"$line"
        if [ -f "$checkpath" ]; then
            if newerThan "$checkpath" "$checkdate"; then
                doSum "$checkpath"
            else
                echo "$line"
            fi
        fi
        # Skip deleted files
    done <"${@:-/dev/stdin}"
}

function doSums() {
    while read -r file; do
        if [ -f "$file" ]; then
            doSum "$file"
        fi
    done <"${@:-/dev/stdin}"
}

timepad=$(($(date +%s | wc -c) - 1))

function doSum() {
    file="$1"
    date=$(stat -f "%0${timepad}m" "$file")
    sum=$(shasum "$file" 2>/dev/null || echo "########################################  $file")
    echo "$date  $sum"
}

while getopts hcCu opt; do
    case $opt in
    h)
        usage
        exit 0
        ;;
    c)
        shift
        checkChanged "$@"
        exit 0
        ;;
    C)
        shift
        check "$@"
        exit 0
        ;;
    u)
        shift
        updateManifest "$@"
        exit 0
        ;;
    \?)
        usage
        exit 1
        ;;
    esac
done

# No flags specified; do default
findAll "$@" | doSums
